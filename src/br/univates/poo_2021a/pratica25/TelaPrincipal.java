package br.univates.poo_2021a.pratica25;

import br.univates.poo_2021a.pratica23.Contato;
import br.univates.poo_2021a.pratica23.ContatosDao;
import br.univates.poo_2021a.pratica23.DaoEdit;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Locale;

/**
 * @author NandoFilter
 * @date 06/19/2021
 */

public class TelaPrincipal extends JFrame {
    private JPanel tela;
    private JTable table;
    private JButton btnAdd;
    private JButton btnEdit;
    private JButton btnExcluir;
    private JButton btnReload;
    private DefaultTableModel tableModel;
    private ContatosDao contatosDao;
    private DaoEdit daoEdit;
    private ArrayList<Contato> contatosCad;

    public TelaPrincipal() {
        this.contatosDao = new ContatosDao();
        this.daoEdit = new DaoEdit();
        this.contatosCad = contatosDao.ler();
        $$$setupUI$$$();
        initComponents();
    }

    // Iniciando Tela
    public void showTela() {
        setContentPane(getter());
        pack();
        setVisible(true);
    }

    public void initComponents() {
        // Instanciando Modelo da Tabela
        tableModel = (DefaultTableModel) table.getModel();

        // Criando Tabela
        criarTable();

        // Bot達o de Adicionar Contato
        btnAdd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                AddContato addContato = new AddContato();
                addContato.setContentPane(addContato.getter());
                addContato.pack();
                addContato.setVisible(true);
            }
        });

        // Bot達o de Editar Contato
        btnEdit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                EditContato editContato = new EditContato();
                editContato.setContentPane(editContato.getter());
                editContato.pack();
                editContato.setVisible(true);
            }
        });

        // Bot達o de Excluir Contato
        btnExcluir.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ExcluirContato excluirContato = new ExcluirContato();
                excluirContato.setContentPane(excluirContato.getter());
                excluirContato.pack();
                excluirContato.setVisible(true);
            }
        });

        // Bot達o de Recarregar Lista
        btnReload.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                loadTable();
            }
        });
    }

    // Criar Tabela
    public void criarTable() {
        tableModel.addColumn("ID");
        tableModel.addColumn("Nome");
        tableModel.addColumn("Telefone");
        tableModel.addColumn("E-mail");

        loadTable();
    }

    // Carregar tabela com Info dos Contatos Cadastrados
    public void loadTable() {

        tableModel.setRowCount(0); // Excluindo Tabela anterior
        contatosCad = contatosDao.ler();

        Object[] contato = new Object[4];

        // Preenchendo Tabela
        for (int i = 0; i < contatosCad.size(); i++) {
            contato[0] = i + 1;
            contato[1] = contatosCad.get(i).getNome();
            contato[2] = contatosCad.get(i).getTelefone();
            contato[3] = contatosCad.get(i).getEmail();

            tableModel.addRow(contato);
        }
    }

    public JPanel getter() {
        return tela;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        tela = new JPanel();
        tela.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(5, 5, 5, 5), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        tela.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        table = new JTable();
        scrollPane1.setViewportView(table);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 5, new Insets(0, 0, 0, 0), -1, -1));
        tela.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        btnAdd = new JButton();
        btnAdd.setEnabled(true);
        Font btnAddFont = this.$$$getFont$$$(null, Font.BOLD, 14, btnAdd.getFont());
        if (btnAddFont != null) btnAdd.setFont(btnAddFont);
        btnAdd.setText("+");
        panel1.add(btnAdd, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(20, -1), null, 0, false));
        btnExcluir = new JButton();
        Font btnExcluirFont = this.$$$getFont$$$(null, Font.BOLD, 14, btnExcluir.getFont());
        if (btnExcluirFont != null) btnExcluir.setFont(btnExcluirFont);
        btnExcluir.setText("-");
        panel1.add(btnExcluir, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(20, -1), null, 0, false));
        btnReload = new JButton();
        Font btnReloadFont = this.$$$getFont$$$(null, Font.BOLD, -1, btnReload.getFont());
        if (btnReloadFont != null) btnReload.setFont(btnReloadFont);
        btnReload.setText("Recarregar");
        panel1.add(btnReload, new com.intellij.uiDesigner.core.GridConstraints(0, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(75, -1), null, 0, false));
        btnEdit = new JButton();
        Font btnEditFont = this.$$$getFont$$$(null, Font.BOLD, -1, btnEdit.getFont());
        if (btnEditFont != null) btnEdit.setFont(btnEditFont);
        btnEdit.setText("Editar");
        panel1.add(btnEdit, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return tela;
    }

}
